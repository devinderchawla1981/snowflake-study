-- JOIN operation code

SELECT
  input_db.ip, // 'ip' column of the log database
  ipinfo_demo.city,
  ipinfo_demo.region,
  ipinfo_demo.country,
  ipinfo_demo.postal,
  ipinfo_demo.lat,
  ipinfo_demo.lng,
  ipinfo_demo.timezone 
FROM log input_db
JOIN demo.location ipinfo_demo
ON ipinfo.public.TO_JOIN_KEY(input_db.ip) = ipinfo_demo.join_key
AND ipinfo.public.TO_INT(input_db.ip) BETWEEN ipinfo_demo.start_ip_int AND ipinfo_demo.end_ip_int;


create table ags_game_audience.enhanced.logs_enhanced as (
SELECT logs.ip_address
, logs.user_login as  GAMER_NAME
, logs.user_event as GAME_EVENT_NAME 
, logs.datetime_iso8601 as GAME_EVENT_UTC
, city
, region
, country
, timezone 
,convert_timezone('UTC',timezone,logs.datetime_iso8601) as GAMER_LTZ_NAME
,DAYNAME(logs.datetime_iso8601) as DOW_NAME
,tod_name
from AGS_GAME_AUDIENCE.RAW.LOGS logs
JOIN IPINFO_GEOLOC.demo.location loc 
ON IPINFO_GEOLOC.public.TO_JOIN_KEY(logs.ip_address) = loc.join_key
AND IPINFO_GEOLOC.public.TO_INT(logs.ip_address) 
BETWEEN start_ip_int AND end_ip_int
JOIN ags_game_audience.raw.time_of_day_lu lu
ON HOUR(CONVERT_TIMEZONE('UTC',timezone,logs.datetime_iso8601))=lu.hour
);

create table ags_game_audience.enhanced.LOGS_ENHANCED_UF 
clone ags_game_audience.enhanced.LOGS_ENHANCED;

show tasks

ALTER TASK ags_game_audience.enhanced.LOGS_ENHANCED RESUME;


create or replace task ags_game_audience.enhanced.LOGS_ENHANCED 
warehouse=compute_wh
schedule='5 minutes'
as
Merge  INTO ags_game_audience.enhanced.LOGS_ENHANCED e  using
 (SELECT logs.ip_address 
, logs.user_login as GAMER_NAME
, logs.user_event as GAME_EVENT_NAME
, logs.datetime_iso8601 as GAME_EVENT_UTC
, city
, region
, country
, timezone as GAMER_LTZ_NAME
, CONVERT_TIMEZONE( 'UTC',timezone,AGS_GAME_AUDIENCE.RAW.PL_LOGSlogs.datetime_iso8601) as game_event_ltz
, DAYNAME(game_event_ltz) as DOW_NAME
, TOD_NAME
from ags_game_audience.raw.LOGS logs
JOIN ipinfo_geoloc.demo.location loc 
ON ipinfo_geoloc.public.TO_JOIN_KEY(logs.ip_address) = loc.join_key
AND ipinfo_geoloc.public.TO_INT(logs.ip_address) 
BETWEEN start_ip_int AND end_ip_int
JOIN ags_game_audience.raw.TIME_OF_DAY_LU tod
ON HOUR(game_event_ltz) = tod.hour  ) r
on r.GAMER_NAME=e.GAMER_NAME
and r.GAME_EVENT_NAME=e.GAME_EVENT_NAME
AND r.GAME_EVENT_UTC=e.GAME_EVENT_UTC
when not matched then
insert (IP_ADDRESS, GAMER_NAME, GAME_EVENT_NAME, GAME_EVENT_UTC, CITY, REGION, COUNTRY, TIMEZONE, GAMER_LTZ_NAME, DOW_NAME, TOD_NAME)
values(IP_ADDRESS, GAMER_NAME, GAME_EVENT_NAME, GAME_EVENT_UTC, CITY, REGION, COUNTRY, TIMEZONE, GAMER_LTZ_NAME, DOW_NAME, TOD_NAME)


list  @UNI_KISHORE_PIPELINE

create or replace TABLE AGS_GAME_AUDIENCE.RAW.PIPELINE_LOGS(
	RAW_LOG VARIANT
);

copy into AGS_GAME_AUDIENCE.RAW.PIPELINE_LOGS
from
@AGS_GAME_AUDIENCE.RAW.uni_kishore_pipeline
file_format = (format_name= ff_json_logs)


create or replace view AGS_GAME_AUDIENCE.RAW.PL_LOGS(
	IP_ADDRESS,
	USER_LOGIN,
	USER_EVENT,
	DATETIME_ISO8601,
	RAW_LOG
) as
select raw_log:ip_address::text as ip_address ,
raw_log:user_login::text as user_login,
raw_log:user_event::text as user_event,
cast(raw_log:datetime_iso8601::text as timestamp) as datetime_iso8601,
raw_log
from  AGS_GAME_AUDIENCE.RAW.PIPELINE_LOGS where raw_log:ip_address::text is not null;
